// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NonProfitApp.Data;

#nullable disable

namespace NonProfitApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231105035638_M1")]
    partial class M1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2028126d-d445-48e3-b8e5-4af65b87fbdf",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "97c1a41d-0cd3-4241-a256-0337945568c5",
                            Name = "Finance",
                            NormalizedName = "FINANCE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d6a5449b-065a-47b5-8b8f-1a907ed379bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c92e1ac-ef48-4288-8caf-f5071cf2e22b",
                            Email = "a@a.a",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "A@A.A",
                            NormalizedUserName = "A@A.A",
                            PasswordHash = "AQAAAAIAAYagAAAAEE8RgGI7NErw1aIjLzNYBZUMaW1rjWvWVsfy8oEebYq6N4VPVPF4YBGnDbTrXyK7yg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "329b9b63-91ad-4058-9a8e-e68f169a87dd",
                            TwoFactorEnabled = false,
                            UserName = "a@a.a"
                        },
                        new
                        {
                            Id = "c143785e-68c3-4aff-8e33-98c77adf284b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ebd9839-3949-4b6f-a021-3a96a0f0baed",
                            Email = "f@f.f",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "F@F.F",
                            NormalizedUserName = "F@F.F",
                            PasswordHash = "AQAAAAIAAYagAAAAEGTmX5GgQhCF3tNY7vbbHhx8LxReQAkRIZo3i6MaCYcU4vwFiuEhL90ThyWPdAcSdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01e17a3c-a43b-4af5-accb-166fa65fdaba",
                            TwoFactorEnabled = false,
                            UserName = "f@f.f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d6a5449b-065a-47b5-8b8f-1a907ed379bc",
                            RoleId = "2028126d-d445-48e3-b8e5-4af65b87fbdf"
                        },
                        new
                        {
                            UserId = "c143785e-68c3-4aff-8e33-98c77adf284b",
                            RoleId = "97c1a41d-0cd3-4241-a256-0337945568c5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NonProfitLibrary.ContactList", b =>
                {
                    b.Property<int>("AccountNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("AccountNo");

                    b.ToTable("ContactList", (string)null);

                    b.HasData(
                        new
                        {
                            AccountNo = 1,
                            City = "Anytown",
                            Country = "USA",
                            Created = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4735),
                            CreatedBy = "System",
                            Email = "john@email.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Modified = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4737),
                            ModifiedBy = "System",
                            PostalCode = "12345",
                            Street = "123 Main St"
                        },
                        new
                        {
                            AccountNo = 2,
                            City = "Anytown",
                            Country = "USA",
                            Created = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4752),
                            CreatedBy = "System",
                            Email = "jane@email.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            Modified = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4754),
                            ModifiedBy = "System",
                            PostalCode = "12345",
                            Street = "123 Main St"
                        },
                        new
                        {
                            AccountNo = 3,
                            City = "Anytown",
                            Country = "CAN",
                            Created = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4761),
                            CreatedBy = "System",
                            Email = "Bob@email.com",
                            FirstName = "Bob",
                            LastName = "Smith",
                            Modified = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4763),
                            ModifiedBy = "System",
                            PostalCode = "12345",
                            Street = "123 Main St"
                        });
                });

            modelBuilder.Entity("NonProfitLibrary.Donations", b =>
                {
                    b.Property<int>("TransId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountNo")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransId");

                    b.HasIndex("AccountNo");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Donations", (string)null);

                    b.HasData(
                        new
                        {
                            TransId = 4,
                            AccountNo = 1,
                            Amount = 1100f,
                            Created = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4946),
                            CreatedBy = "System",
                            Date = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4937),
                            Modified = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4947),
                            ModifiedBy = "System",
                            Notes = "Donation",
                            PaymentMethodId = 1,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            TransId = 5,
                            AccountNo = 2,
                            Amount = 1200f,
                            Created = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4958),
                            CreatedBy = "System",
                            Date = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4955),
                            Modified = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4959),
                            ModifiedBy = "System",
                            Notes = "Event",
                            PaymentMethodId = 2,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            TransId = 6,
                            AccountNo = 3,
                            Amount = 1300f,
                            Created = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4966),
                            CreatedBy = "System",
                            Date = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4964),
                            Modified = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4967),
                            ModifiedBy = "System",
                            Notes = "Membership",
                            PaymentMethodId = 3,
                            TransactionTypeId = 3
                        },
                        new
                        {
                            TransId = 1,
                            AccountNo = 1,
                            Amount = 100f,
                            Created = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "System",
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modified = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = "System",
                            Notes = "Donation",
                            PaymentMethodId = 1,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            TransId = 2,
                            AccountNo = 2,
                            Amount = 200f,
                            Created = new DateTime(2022, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "System",
                            Date = new DateTime(2022, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modified = new DateTime(2022, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = "System",
                            Notes = "Event",
                            PaymentMethodId = 2,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            TransId = 3,
                            AccountNo = 3,
                            Amount = 300f,
                            Created = new DateTime(2022, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "System",
                            Date = new DateTime(2022, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modified = new DateTime(2022, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = "System",
                            Notes = "Membership",
                            PaymentMethodId = 3,
                            TransactionTypeId = 3
                        });
                });

            modelBuilder.Entity("NonProfitLibrary.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentMethodId = 1,
                            Created = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4880),
                            CreatedBy = "System",
                            Modified = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4884),
                            ModifiedBy = "System",
                            Name = "Cash"
                        },
                        new
                        {
                            PaymentMethodId = 2,
                            Created = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4894),
                            CreatedBy = "System",
                            Modified = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4896),
                            ModifiedBy = "System",
                            Name = "Check"
                        },
                        new
                        {
                            PaymentMethodId = 3,
                            Created = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4901),
                            CreatedBy = "System",
                            Modified = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4902),
                            ModifiedBy = "System",
                            Name = "Credit Card"
                        });
                });

            modelBuilder.Entity("NonProfitLibrary.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionType", (string)null);

                    b.HasData(
                        new
                        {
                            TransactionTypeId = 1,
                            Created = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4813),
                            CreatedBy = "System",
                            Description = "Donation",
                            Modified = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4814),
                            ModifiedBy = "System",
                            Name = "Donation"
                        },
                        new
                        {
                            TransactionTypeId = 2,
                            Created = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4823),
                            CreatedBy = "System",
                            Description = "Membership",
                            Modified = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4824),
                            ModifiedBy = "System",
                            Name = "Membership"
                        },
                        new
                        {
                            TransactionTypeId = 3,
                            Created = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4829),
                            CreatedBy = "System",
                            Description = "Event",
                            Modified = new DateTime(2023, 11, 4, 20, 56, 37, 928, DateTimeKind.Local).AddTicks(4831),
                            ModifiedBy = "System",
                            Name = "Event"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NonProfitLibrary.Donations", b =>
                {
                    b.HasOne("NonProfitLibrary.ContactList", "Account")
                        .WithMany()
                        .HasForeignKey("AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NonProfitLibrary.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NonProfitLibrary.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PaymentMethod");

                    b.Navigation("TransactionType");
                });
#pragma warning restore 612, 618
        }
    }
}
