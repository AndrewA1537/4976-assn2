@page "/ContactList/Edit/{AccountId:int}"
@using NonProfitLibrary
@using Services
@inject ContactListService contactListService
@inject NavigationManager NavigationManager

<h1>Edit Contact</h1>

@if (contact == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Edit Contact Details</h3>
    <EditForm Model="contact" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="FirstName">First Name</label>
            <InputText id="FirstName" @bind-Value="contact.FirstName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="LastName">Last Name</label>
            <InputText id="LastName" @bind-Value="contact.LastName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="Email">Email</label>
            <InputText id="Email" @bind-Value="contact.Email" class="form-control" />
        </div>
        <div class="form-group">
            <label for="Street">Street</label>
            <InputText id="Street" @bind-Value="contact.Street" class="form-control" />
        </div>
        <div class="form-group">
            <label for="City">City</label>
            <InputText id="City" @bind-Value="contact.City" class="form-control" />
        </div>
        <div class="form-group">
            <label for="PostalCode">Postal Code</label>
            <InputText id="PostalCode" @bind-Value="contact.PostalCode" class="form-control" />
        </div>
        <div class="form-group">
            <label for="Country">Country</label>
            <InputText id="Country" @bind-Value="contact.Country" class="form-control" />
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Save</button>
            <a href="/ContactList/Index" class="btn btn-secondary">Back to List</a>
        </div>
    </EditForm>
}

@code
{
    private ContactList? contact;

    [Parameter] public int AccountId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        contact = await contactListService.GetContactByIdAsync(AccountId);
    }

    private async Task HandleValidSubmit()
    {
        if (contact != null)
        {
            var updatedContact = await contactListService.UpdateContactAsync(AccountId, contact);
            if (updatedContact != null)
            {
                // Redirect to the index page after editing.
                NavigationManager.NavigateTo("/ContactList/Index");
            }
            else
            {
                // Handle the case where the contact is not found in the database.
                // This is just a placeholder. You can decide how you want to handle this scenario.
                Console.WriteLine("Contact not found!");
            }
        }
    }
}
